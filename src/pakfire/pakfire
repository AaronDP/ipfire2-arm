#!/usr/bin/perl

	require "/opt/pakfire/lib/functions.pl";
	
	my $interactive = 1;
	
	&Pakfire::logger("### IPFire Pakfire $Conf::version started!");
	&Pakfire::checkcryptodb;

	### Check if we are running as root
	#
	my $user = qx(whoami);
	chomp($user);
	unless ( "$user" eq "root" ) {
	  &Pakfire::message("You must run pakfire as user root!");
	  exit 1;
	}
	
	### Check if there are running some other pakfire processes
	#
	#my $return = `pidof pakfire`;
	#chomp($return);
	#if ($return) {
	#	&Pakfire::message("There are running some other pakfire processes...");
	#	exit 1;
	#}
	
	### Check if we are started by another name
	#
	if ( $0 =~ /pakfire-update$/ ) {
		&Pakfire::message("Running an update started by fcron.");
		$ARGV[0] = "update";
		$interactive = 0;
	} elsif ( $0 =~ /pakfire-upgrade$/ ) {
		&Pakfire::message("Running an upgrade started by fcron.");
		$ARGV[0] = "upgrade";
		$interactive = 0;
	}
	
	unless (@ARGV) {
		&Pakfire::usage;
	}
	
	foreach (@ARGV) {
		if ("$_" =~ "^-") {
			$interactive = 0 if ("$_" eq "--non-interactive");
			$interactive = 0 if ("$_" eq "-y");
		}
	}

	if ("$ARGV[0]" eq "install") {
		shift;
		
		### Make sure that the list is not outdated. 
		&Pakfire::dbgetlist("noforce");

		open(FILE, "<$Conf::dbdir/lists/packages_list.db");
		my @db = <FILE>;
		close(FILE);
		
		my $dep;
		my @deps;
		my $pak;
		my @paks;
		my @temp;
		my @templine;
		my $found = 0;
		my $return;
		my @all;
		foreach $pak (@ARGV) {
			unless ("$pak" =~ "^-") {
				$return = &Pakfire::isinstalled($pak);
				if ($return eq 0) {
					&Pakfire::message("Package $pak is already installed.");
					next; 
				}
				$found = 0;
				foreach (@db) {
					@templine = split(/;/,$_);
					if ("$templine[0]" eq "$pak" ) {
						push(@paks,$pak);
						push(@all,$pak);
						@temp = &Pakfire::resolvedeps("$pak");
						foreach $dep (@temp) {
							push(@deps,$dep) if $dep;
							push(@all,$dep) if $dep;
						}
						$found = 1;
						break;
					}
				}
				&Pakfire::message("");
				&Pakfire::message("The pak \"$pak\" is not known. Please try running \"pakfire update\".") if ($found == 0);
			}
		}
		
		unless (@paks) {
			&Pakfire::message("No packages to install. Exiting...");
			exit 1;
		}

		&Pakfire::message("");
		&Pakfire::message("");
		&Pakfire::message("### Packages to install:");
		foreach $pak (sort @paks) {
		  my $size = &Pakfire::getsize("$pak");
			$size = &Pakfire::beautifysize($size);
		  &Pakfire::message("# $pak  \t\t - $size");
		}
		
		if (@deps) {
			my %sort = map{ $_, 1 } @deps;
			@deps = sort keys %sort;
			&Pakfire::message("");
			&Pakfire::message("### Packages to install for dependencies:");
		}
		foreach $dep (sort @deps) {
		  my $size = &Pakfire::getsize("$dep");
			$size = &Pakfire::beautifysize($size);
		  &Pakfire::message("# $dep  \t\t - $size");
		}
		
		my $totalsize;
		foreach $pak (@all) {
			$totalsize = ($totalsize + &Pakfire::getsize("$pak"));
		}
		$totalsize = &Pakfire::beautifysize($totalsize);
		&Pakfire::message("");
		&Pakfire::message("### Total size: \t ~ $totalsize");
		&Pakfire::message("");
		
		if ($interactive) {
		  &Pakfire::message("Is this okay? [y/N]");
			my $ret = <STDIN>;
			chomp($ret);
			&Pakfire::logger("Answer: $ret");
			if ( $ret ne "y" ) {
			  &Pakfire::message("Installation aborted.");
			  exit 1;
			}
		}
		
		my %sort = map{ $_, 1 } @all;
		@all = sort keys %sort;

		### Download first
		foreach $pak (sort @all) {
			&Pakfire::message("# --> Downloading: $pak");
			&Pakfire::getpak("$pak", "");
		}

		foreach $pak (sort @all) {
			&Pakfire::setuppak("$pak") if ($pak ne "");
		}
		
	} elsif ("$ARGV[0]" eq "remove") {
		shift;
		
		my @paks;
		my $pak;
		
		foreach $pak (@ARGV) {
			unless ("$pak" =~ "^-") {
				$return = &Pakfire::isinstalled($pak);
				if ($return ne 0) {
					&Pakfire::message("Package $pak is not installed.");
					next;
				}
			
				push(@paks, $pak);
			
			}
		}
		
		unless (@paks) {
			&Pakfire::message("No packages to remove. Exiting...");
			exit 1;
		}
		
		&Pakfire::message("");
		&Pakfire::message("");
		&Pakfire::message("### Packages to remove:");
		foreach $pak (sort @paks) {
		  my $size = &Pakfire::getsize("$pak");
			$size = &Pakfire::beautifysize($size);
		  &Pakfire::message("# $pak  \t\t - $size");
		}
		
		if ($interactive) {
		  &Pakfire::message("Is this okay? [y/N]");
			my $ret = <STDIN>;
			chomp($ret);
			&Pakfire::logger("Answer: $ret");
			if ( $ret ne "y" ) {
			  &Pakfire::message("Installation aborted.");
			  exit 1;
			}
		}
		
		foreach $pak (@paks) {
			&Pakfire::removepak("$pak");
		}
	
	
	} elsif ("$ARGV[0]" eq "update") {
		my $force = "noforce";
		&Pakfire::makeuuid();
		&Pakfire::senduuid();
		&Pakfire::getmirrors();
		$force = "force" if ("$ARGV[1]" eq "--force");
		&Pakfire::dbgetlist("$force");
		
	
	} elsif ("$ARGV[0]" eq "upgrade") {
		my @upgradepaks = &Pakfire::dblist("upgrade", "noweb");
		my @temp;
		
		foreach (@upgradepaks) {
			@temp = &Pakfire::resolvedeps("$_");
			foreach (@temp) { push(@upgradepaks,$_) if $_; }
		}
		
		if (@upgradepaks) {
			&Pakfire::message("");
			&Pakfire::message("We are going to install all packages listed above.");
			if ($interactive) {
			  &Pakfire::message("Is this okay? [y/N]");
				my $ret = <STDIN>;
				chomp($ret);
				&Pakfire::logger("Answer: $ret");
				if ( $ret ne "y" ) {
				  &Pakfire::message("Installation aborted.");
				  exit 1;
				}
			}
		}
		
		### Download first
		foreach (sort @upgradepaks) {
			&Pakfire::message("# --> Downloading: $_");
			&Pakfire::getpak("$_", "");
		}
		
		foreach (sort @upgradepaks) {
			&Pakfire::upgradepak("$_");
		}
		
	} elsif ("$ARGV[0]" eq "list") {
		&Pakfire::dblist("all", "noweb");
		
	} elsif ("$ARGV[0]" eq "resolvedeps") {
		foreach (@ARGV) {
			next if ("$_" eq "resolvedeps");
			&Pakfire::resolvedeps("$_");
		}
		
	} else {
		&Pakfire::usage;
	}
	
exit 0;
