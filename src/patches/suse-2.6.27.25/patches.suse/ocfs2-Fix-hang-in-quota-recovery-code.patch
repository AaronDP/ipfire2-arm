From: Jan Kara <jack@suse.cz>
References: fate#302681
Subject: ocfs2: Fix hang in quota recovery code
Patch-mainline: 2.6.29?

It could happen that some node started using a recovered slot before we got to
quota recovery on it and it crashed. Recovery thread would then hang waiting
for quota file lock which could never be obtained because it first has to be
recovered by the recovery thread. We move ocfs2_begin_quota_recovery()
under super block cluster lock so no node can start using recovered slot before
we start quota recovery on it.

Signed-off-by: Jan Kara <jack@suse.cz>

---
 fs/ocfs2/journal.c     |    4 ++--
 fs/ocfs2/quota_local.c |   11 ++---------
 2 files changed, 4 insertions(+), 11 deletions(-)

--- a/fs/ocfs2/journal.c
+++ b/fs/ocfs2/journal.c
@@ -1127,8 +1127,6 @@ skip_recovery:
 	if (status < 0)
 		mlog_errno(status);
 
-	ocfs2_super_unlock(osb, 1);
-
 	/* Now it is right time to recover quotas... */
 	for (i = 0; i < rm_quota_used; i++) {
 		qrec = ocfs2_begin_quota_recovery(osb, rm_quota[i]);
@@ -1141,6 +1139,8 @@ skip_recovery:
 						NULL, NULL, qrec);
 	}
 
+	ocfs2_super_unlock(osb, 1);
+
 	/* We always run recovery on our own orphan dir - the dead
 	 * node(s) may have disallowd a previos inode delete. Re-processing
 	 * is therefore required. */
--- a/fs/ocfs2/quota_local.c
+++ b/fs/ocfs2/quota_local.c
@@ -383,15 +383,8 @@ struct ocfs2_quota_recovery *ocfs2_begin
 			goto out;
 		}
 		status = ocfs2_inode_lock_full(lqinode, NULL, 1,
-						       OCFS2_META_LOCK_NOQUEUE);
-		/* Someone else is holding the lock? Then he must be
-		 * doing the recovery. Just skip the file... */
-		if (status == -EAGAIN) {
-			mlog(ML_NOTICE, "skipping quota recovery for slot %d "
-			     "because quota file is locked.\n", slot_num);
-			status = 0;
-			goto out_put;
-		} else if (status < 0) {
+						       OCFS2_META_LOCK_RECOVERY);
+		if (status < 0) {
 			mlog_errno(status);
 			goto out_put;
 		}
