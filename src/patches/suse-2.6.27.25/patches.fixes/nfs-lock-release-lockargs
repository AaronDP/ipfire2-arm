From: Felix Blyakher <felixb@sgi.com>
Patch-mainline: queued for 2.6.31
References: bnc#501651
Date: Tue, 31 Mar 2009 20:12:56 +0000 (-0500)
Subject: lockd: call locks_release_private to cleanup per-filesystem state
X-Git-Url: http://git.linux-nfs.org/?p=bfields%2Flinux.git;a=commitdiff_plain;h=a9e61e25f9d2e7e43bf17625f5cb56c9e0a89b17

lockd: call locks_release_private to cleanup per-filesystem state

For every lock request lockd creates a new file_lock object
in nlmsvc_setgrantargs() by copying the passed in file_lock with
locks_copy_lock(). A filesystem can attach it's own lock_operations
vector to the file_lock. It has to be cleaned up at the end of the
file_lock's life. However, lockd doesn't do it today, yet it
asserts in nlmclnt_release_lockargs() that the per-filesystem
state is clean.
This patch fixes it by exporting locks_release_private() and adding
it to nlmsvc_freegrantargs(), to be symmetrical to creating a
file_lock in nlmsvc_setgrantargs().

Signed-off-by: Felix Blyakher <felixb@sgi.com>

Acked-by: NeilBrown <neilb@suse.de>

---
 fs/lockd/svclock.c |    2 ++
 fs/locks.c         |    3 ++-
 include/linux/fs.h |    1 +
 3 files changed, 5 insertions(+), 1 deletion(-)

--- linux-2.6.27-SLE11_BRANCH.orig/fs/lockd/svclock.c
+++ linux-2.6.27-SLE11_BRANCH/fs/lockd/svclock.c
@@ -326,6 +326,8 @@ static void nlmsvc_freegrantargs(struct 
 {
 	if (call->a_args.lock.oh.data != call->a_owner)
 		kfree(call->a_args.lock.oh.data);
+
+	locks_release_private(&call->a_args.lock.fl);
 }
 
 /*
--- linux-2.6.27-SLE11_BRANCH.orig/fs/locks.c
+++ linux-2.6.27-SLE11_BRANCH/fs/locks.c
@@ -151,7 +151,7 @@ static struct file_lock *locks_alloc_loc
 	return kmem_cache_alloc(filelock_cache, GFP_KERNEL);
 }
 
-static void locks_release_private(struct file_lock *fl)
+void locks_release_private(struct file_lock *fl)
 {
 	if (fl->fl_ops) {
 		if (fl->fl_ops->fl_release_private)
@@ -165,6 +165,7 @@ static void locks_release_private(struct
 	}
 
 }
+EXPORT_SYMBOL_GPL(locks_release_private);
 
 /* Free a lock which is not in use. */
 static void locks_free_lock(struct file_lock *fl)
--- linux-2.6.27-SLE11_BRANCH.orig/include/linux/fs.h
+++ linux-2.6.27-SLE11_BRANCH/include/linux/fs.h
@@ -1015,6 +1015,7 @@ extern void locks_copy_lock(struct file_
 extern void __locks_copy_lock(struct file_lock *, const struct file_lock *);
 extern void locks_remove_posix(struct file *, fl_owner_t);
 extern void locks_remove_flock(struct file *);
+extern void locks_release_private(struct file_lock *);
 extern void posix_test_lock(struct file *, struct file_lock *);
 extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
 extern int posix_lock_file_wait(struct file *, struct file_lock *);
