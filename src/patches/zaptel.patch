diff -urN zaptel-1.2.6.orig/Makefile zaptel-1.2.6/Makefile
--- zaptel-1.2.6.orig/Makefile	2006-05-23 01:11:36.000000000 +0200
+++ zaptel-1.2.6/Makefile	2006-06-06 14:54:33.000000000 +0200
@@ -124,7 +124,7 @@
 ifneq (,$(wildcard /usr/include/newt.h))
 ZTTOOL:=zttool
 endif
-BINS=ztcfg torisatool makefw ztmonitor ztspeed $(ZTTOOL) zttest fxotune
+BINS=ztcfg torisatool makefw ztmonitor ztspeed $(ZTTOOL) zttest fxotune ztpty
 
 all: $(BUILDVER) $(LIBTONEZONE_SO)
 
@@ -209,6 +209,9 @@
 
 ztmonitor.o: ztmonitor.c zaptel.h
 
+ztpty.o: ztpty.c
+	$(CC) -o $@ -c $^
+
 ztspeed.o: ztspeed.c
 	$(CC) -o $@ -c $^
 
@@ -221,6 +224,9 @@
 ztspeed: ztspeed.o
 	$(CC) -o $@ $^
 
+ztpty: ztpty.o
+	$(CC) -o $@ $^
+
 sethdlc-new: sethdlc-new.o
 	$(CC) -o $@ $^
 
diff -urN zaptel-1.2.6.orig/zaptel.c zaptel-1.2.6/zaptel.c
--- zaptel-1.2.6.orig/zaptel.c	2005-12-17 03:04:05.000000000 +0100
+++ zaptel-1.2.6/zaptel.c	2006-07-31 14:12:08.000000000 +0200
@@ -139,6 +139,7 @@
 EXPORT_SYMBOL(zt_qevent_lock);
 EXPORT_SYMBOL(zt_hooksig);
 EXPORT_SYMBOL(zt_alarm_notify);
+EXPORT_SYMBOL(zt_alarm_notify_no_master_change);
 EXPORT_SYMBOL(zt_set_dynamic_ioctl);
 EXPORT_SYMBOL(zt_ec_chunk);
 EXPORT_SYMBOL(zt_ec_span);
@@ -2685,6 +2686,30 @@
 	}
 }
 
+void zt_alarm_notify_no_master_change(struct zt_span *span)
+{
+	int j;
+	int x;
+
+	span->alarms &= ~ZT_ALARM_LOOPBACK;
+	/* Determine maint status */
+	if (span->maintstat || span->mainttimer)
+		span->alarms |= ZT_ALARM_LOOPBACK;
+	/* DON'T CHANGE THIS AGAIN. THIS WAS DONE FOR A REASON.
+ 	   The expression (a != b) does *NOT* do the same thing
+	   as ((!a) != (!b)) */
+	/* if change in general state */
+	if ((!span->alarms) != (!span->lastalarms)) {
+		if (span->alarms)
+			j = ZT_EVENT_ALARM;
+		else
+			j = ZT_EVENT_NOALARM;
+		span->lastalarms = span->alarms;
+		for (x=0;x < span->channels;x++)
+			zt_qevent_lock(&span->chans[x], j);
+	}
+}
+
 #define VALID_SPAN(j) do { \
 	if ((j >= ZT_MAX_SPANS) || (j < 1)) \
 		return -EINVAL; \
@@ -4913,11 +4938,40 @@
 					*(txb++) = fasthdlc_tx_run_nocheck(&ms->txhdlc);
 				}
 				bytes -= left;
+#ifdef CONFIG_ZAPATA_BRI_DCHANS
+			} else if (ms->flags & ZT_FLAG_BRIDCHAN) {
+			    /*
+			     * Let's get this right, we want to transmit complete frames only.
+			     * The card driver will do the dirty HDLC work for us.
+			     * txb (transmit buffer) is supposed to be big enough to store one frame
+			     * we will make this as big as the D fifo (1KB or 2KB)
+			     */
+
+			    /* there are 'left' bytes in the user buffer left to transmit */
+			    left = ms->writen[ms->outwritebuf] - ms->writeidx[ms->outwritebuf] - 2;
+			    if (left > ms->maxbytes2transmit) {
+				memcpy(txb, buf + ms->writeidx[ms->outwritebuf], ms->maxbytes2transmit);
+				ms->writeidx[ms->outwritebuf] += ms->maxbytes2transmit;
+				txb += ms->maxbytes2transmit;
+				ms->bytes2transmit = ms->maxbytes2transmit;
+				ms->eoftx = 0;
+			    } else {
+				memcpy(txb, buf + ms->writeidx[ms->outwritebuf], left);
+				ms->writeidx[ms->outwritebuf] += left + 2;
+				txb += left;
+				ms->bytes2transmit = left;
+				ms->eoftx = 1;
+			    }
+			    bytes = 0;
+#endif
 			} else {
 				memcpy(txb, buf + ms->writeidx[ms->outwritebuf], left);
 				ms->writeidx[ms->outwritebuf]+=left;
 				txb += left;
 				bytes -= left;
+#if defined(CONFIG_ZAPATA_BRI_DCHANS)	
+				ms->bytes2transmit=ZT_CHUNKSIZE;
+#endif
 			}
 			/* Check buffer status */
 			if (ms->writeidx[ms->outwritebuf] >= ms->writen[ms->outwritebuf]) {
@@ -4962,6 +5016,17 @@
 				/* Transmit a flag if this is an HDLC channel */
 				if (ms->flags & ZT_FLAG_HDLC)
 					fasthdlc_tx_frame_nocheck(&ms->txhdlc);
+#if defined(CONFIG_ZAPATA_BRI_DCHANS)	
+				if(ms->flags & ZT_FLAG_BRIDCHAN) { 
+			//	    if (ms->bytes2transmit > 0) {
+					// txb += 2;
+					// ms->bytes2transmit -= 2;
+					bytes=0;
+					ms->eoftx = 1;
+//					printk(KERN_CRIT "zaptel EOF(%d) bytes2transmit %d\n",ms->eoftx,ms->bytes2transmit);
+			//	    }
+				}
+#endif
 #ifdef CONFIG_ZAPATA_NET
 				if (ms->flags & ZT_FLAG_NETDEV)
 					netif_wake_queue(ztchan_to_dev(ms));
@@ -4972,7 +5037,7 @@
 					tasklet_schedule(&ms->ppp_calls);
 				}
 #endif
-			}
+			} 
 		} else if (ms->curtone && !(ms->flags & ZT_FLAG_PSEUDO)) {
 			left = ms->curtone->tonesamples - ms->tonep;
 			if (left > bytes)
@@ -5018,6 +5083,10 @@
 				memset(txb, 0xFF, bytes);
 			}
 			bytes = 0;
+#if defined(CONFIG_ZAPATA_BRI_DCHANS)	
+		} else if(ms->flags & ZT_FLAG_BRIDCHAN) { 
+		    bytes = 0;
+#endif
 		} else {
 			memset(txb, ZT_LIN2X(0, ms), bytes);	/* Lastly we use silence on telephony channels */
 			bytes = 0;
@@ -5743,6 +5812,13 @@
 	int left, x;
 
 	int bytes = ZT_CHUNKSIZE;
+#if defined(CONFIG_ZAPATA_BRI_DCHANS)	
+	if (ms->flags & ZT_FLAG_BRIDCHAN) {
+	    bytes = ms->bytes2receive;
+	    if (bytes < 1) return;
+//	    printk(KERN_CRIT "bytes2receive %d\n",ms->bytes2receive);
+	}
+#endif
 
 	while(bytes) {
 #if defined(CONFIG_ZAPATA_NET)  || defined(CONFIG_ZAPATA_PPP)
@@ -5801,6 +5877,19 @@
 						}
 					}
 				}
+#ifdef CONFIG_ZAPATA_BRI_DCHANS
+			} else if (ms->flags & ZT_FLAG_BRIDCHAN) {
+			    memcpy(buf + ms->readidx[ms->inreadbuf], rxb, left);
+			    rxb += left;
+			    ms->readidx[ms->inreadbuf] += left;
+			    bytes -= left;
+			    if (ms->eofrx == 1) {
+				eof=1;
+			    }
+//			    printk(KERN_CRIT "receiving %d bytes\n",ms->bytes2receive);
+			    ms->bytes2receive = 0;
+			    ms->eofrx = 0;
+#endif
 			} else {
 				/* Not HDLC */
 				memcpy(buf + ms->readidx[ms->inreadbuf], rxb, left);
diff -urN zaptel-1.2.6.orig/zaptel.h zaptel-1.2.6/zaptel.h
--- zaptel-1.2.6.orig/zaptel.h	2005-12-17 03:04:05.000000000 +0100
+++ zaptel-1.2.6/zaptel.h	2006-07-31 12:58:04.000000000 +0200
@@ -994,6 +994,13 @@
 	int do_ppp_error;
 	struct sk_buff_head ppp_rq;
 #endif
+#ifdef CONFIG_ZAPATA_BRI_DCHANS
+	int bytes2receive;
+	int maxbytes2transmit; /* size of the tx buffer in the card driver */
+	int bytes2transmit;
+	int eofrx;
+	int eoftx;
+#endif
 	spinlock_t lock;
 	char name[40];		/* Name */
 	/* Specified by zaptel */
@@ -1068,7 +1075,7 @@
 	int		txbufpolicy;			/* Buffer policy */
 	int		rxbufpolicy;			/* Buffer policy */
 	int		txdisable;				/* Disable transmitter */
-	int 	rxdisable;				/* Disable receiver */
+	int 		rxdisable;				/* Disable receiver */
 	
 	
 	/* Tone zone stuff */
@@ -1231,6 +1238,10 @@
 #define ZT_FLAG_T1PPP			(1 << 15)
 #define ZT_FLAG_SIGFREEZE		(1 << 16)	/* Freeze signalling */
 
+#if defined(CONFIG_ZAPATA_BRI_DCHANS)	
+#define ZT_FLAG_BRIDCHAN		(1 << 17)
+#endif
+
 struct zt_span {
 	spinlock_t lock;
 	void *pvt;			/* Private stuff */
@@ -1404,6 +1415,9 @@
 /* Notify a change possible change in alarm status */
 extern void zt_alarm_notify(struct zt_span *span);
 
+/* Notify a change possible change in alarm status, DONT change the zaptel master! */
+extern void zt_alarm_notify_no_master_change(struct zt_span *span);
+
 /* Initialize a tone state */
 extern void zt_init_tone_state(struct zt_tone_state *ts, struct zt_tone *zt);
 
diff -urN zaptel-1.2.6.orig/zconfig.h zaptel-1.2.6/zconfig.h
--- zaptel-1.2.6.orig/zconfig.h	2005-11-29 19:42:08.000000000 +0100
+++ zaptel-1.2.6/zconfig.h	2006-08-02 20:34:43.000000000 +0200
@@ -49,11 +49,11 @@
 /* #define ECHO_CAN_MARK */
 /* #define ECHO_CAN_MARK2 */
 /* #define ECHO_CAN_MARK3 */
-#define ECHO_CAN_KB1
+/* #define ECHO_CAN_KB1 */
 /* MG2 is a version of KB1 that has some changes to it that are
  * supposed to improve how it performs.  If you have echo problems,
  * try it out! */
-/* #define ECHO_CAN_MG2 */
+#define ECHO_CAN_MG2
 
 /*
  * Uncomment for aggressive residual echo supression under 
@@ -152,4 +152,10 @@
  */
 /* #define FXSFLASH */
 
+/*
+ * Uncomment the following for BRI D channels
+ *
+ */
+#define CONFIG_ZAPATA_BRI_DCHANS
+
 #endif
diff -urN zaptel-1.2.6.orig/ztpty.c zaptel-1.2.6/ztpty.c
--- zaptel-1.2.6.orig/ztpty.c	1970-01-01 01:00:00.000000000 +0100
+++ zaptel-1.2.6/ztpty.c	2006-06-06 14:54:33.000000000 +0200
@@ -0,0 +1,112 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <fcntl.h>
+#include <sys/time.h>
+#include <sys/signal.h>
+#include <sys/select.h>
+#include <math.h>
+#include "zaptel.h"
+
+#define SIZE 8000
+
+
+
+void doit(int fd, int stdinfd) {
+    fd_set fds;
+    char inbuffer[4096];
+    char outbuffer[4096];
+    int res = 0;
+    int i = 0;
+
+//    fprintf(stderr, "fd %d stdin fd %d\n", fd, stdinfd);
+
+    for (;;) {
+	FD_ZERO(&fds);
+        FD_SET(fd, &fds);
+	FD_SET(stdinfd, &fds);
+        /* Wait for *some* sort of I/O */
+        res = select(stdinfd + 1, &fds, NULL, NULL, NULL);
+        if (res < 0) {
+                fprintf(stderr, "Error in select: %s\n", strerror(errno));
+                return;
+        }
+        if (FD_ISSET(stdinfd, &fds)) {
+            res = read(stdinfd, inbuffer, sizeof(inbuffer));
+	    if (res > 0) {
+//		fprintf(stderr, "read %d bytes from stdin\n", res);
+		if (res > 0) {
+		    for (i=0; i < res ; i++) {
+			if (inbuffer[i] == '\n') {
+			    if ((i > 0) && (inbuffer[i-1] == ' ')) {
+				inbuffer[i-1] = 0x1a;
+			    }
+			    inbuffer[i] = 0xd;
+			}
+		    }
+		res = write(fd, inbuffer, res+2);
+//		res = write(STDOUT_FILENO, inbuffer, res);
+//		fprintf(stderr, "wrote %d bytes to stdout\n", res);
+		}
+	    }
+        }
+        if (FD_ISSET(fd, &fds)) {
+            res = read(fd, outbuffer, sizeof(outbuffer));
+//	    fprintf(stderr, "read %d bytes from fd\n", res);
+	    if (res > 0) {
+		res = write(STDOUT_FILENO, outbuffer, res);
+//		fprintf(stderr, "wrote %d bytes to stdout\n", res);
+	    }
+        }
+    }
+
+
+}
+
+int main(int argc, char *argv[])
+{
+	int fd;
+	int stdinfd;
+	struct zt_params p;
+	struct zt_bufferinfo bi;
+	int blocksize=0;
+	fd = open(argv[1], O_RDWR | O_NONBLOCK);
+	if (fd < 0) {
+		fprintf(stderr, "Unable to open zap interface: %s\n", strerror(errno));
+		exit(1);
+	}
+	if (ioctl(fd, ZT_GET_PARAMS, &p)) {
+		fprintf(stderr, "Unable to get parameters on '%s': %s\n", argv[1], strerror(errno));
+		exit(1);
+	}
+	if ((p.sigtype != ZT_SIG_HDLCRAW) && (p.sigtype != ZT_SIG_HDLCFCS)) {
+		fprintf(stderr, "%s is in %d signalling, not FCS HDLC or RAW HDLC mode\n", argv[1], p.sigtype);
+		exit(1);
+	}
+
+	if (ioctl(fd, ZT_GET_BLOCKSIZE, &blocksize)) {
+		fprintf(stderr, "Unable to get blocksize on '%s': %s\n", argv[1], strerror(errno));
+		exit(1);
+	} else {
+//		fprintf(stderr, "blocksize %d\n", blocksize);
+	}
+	
+	bi.txbufpolicy = ZT_POLICY_IMMEDIATE;
+        bi.rxbufpolicy = ZT_POLICY_IMMEDIATE;
+	bi.numbufs = 16;
+	bi.bufsize = 1024;
+	if (ioctl(fd, ZT_SET_BUFINFO, &bi)) {
+		fprintf(stderr, "Unable to set buffer info on '%s': %s\n", argv[1], strerror(errno));
+		exit(1);
+	}
+
+	stdinfd = open("/dev/stdin", O_RDONLY | O_NONBLOCK);
+
+	
+	doit(fd, stdinfd);
+	close(stdinfd);
+	close(fd);
+	return 0;
+}
