###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

VER        = 4.0.3

THISAPP    = gcc-$(VER)
DL_FILE    = $(THISAPP).tar.bz2
DL_FROM    = $(URL_IPFIRE)
DIR_APP    = $(DIR_SRC)/$(THISAPP)
CFLAGS     =
CXXFLAGS   =
TARGET_PATH = /opt/$(MACHINE)-uClibc/bin:$(PATH)

# Normal build or /tools build.
#
ifeq "$(ROOT)" ""
ifeq "$(INST)" "1"
  TARGET = $(DIR_INFO)/$(THISAPP)-install1
  EXTRA_CONFIG = --prefix=/opt/$(MACHINE)-uClibc \
		--build=$(MACHINE)-pc-linux-gnu \
		--host=$(MACHINE)-pc-linux-gnu \
		--target=$(MACHINE)-linux-uclibc \
		--enable-languages=c \
		--with-sysroot=$(DIR_SRC)/uClibc_dev \
		--disable-__cxa_atexit \
		--enable-target-optspace \
		--with-gnu-ld \
		--disable-shared \
		--enable-threads \
		--enable-multilib \
		--disable-nls
  EXTRA_MAKE = 
  EXTRA_INSTALL = 
else
ifeq "$(INST)" "2"
  TARGET = $(DIR_INFO)/$(THISAPP)-install2
  EXTRA_CONFIG = --prefix=/opt/$(MACHINE)-uClibc \
		--build=$(MACHINE)-pc-linux-gnu \
		--host=$(MACHINE)-pc-linux-gnu \
		--target=$(MACHINE)-linux-uclibc \
		--enable-languages=c,c++ \
		--with-sysroot=$(DIR_SRC)/uClibc_dev \
		--disable-__cxa_atexit \
		--enable-target-optspace \
		--with-gnu-ld \
		--enable-shared \
		--disable-nls \
		--enable-threads \
		--enable-multilib
  EXTRA_MAKE = 
  EXTRA_INSTALL = 
else
  TARGET = $(DIR_INFO)/$(THISAPP)
  EXTRA_CONFIG = --prefix=/usr \
		--libexecdir=/usr/lib \
		--enable-shared \
		--enable-threads=posix \
		--enable-__cxa_atexit \
		--enable-clocale=gnu \
		--enable-languages=c,c++ \
		--disable-nls
  EXTRA_MAKE =
  EXTRA_INSTALL =
endif
endif
else
ifeq "$(PASS)" "1"
  TARGET = $(DIR_INFO)/$(THISAPP)-tools1
  EXTRA_CONFIG = --prefix=/tools \
		--with-local-prefix=/tools \
		--disable-nls \
		--enable-shared \
		--enable-languages=c
  EXTRA_MAKE = bootstrap BOOT_LDFLAGS="-static"
  EXTRA_INSTALL = 
else
  TARGET = $(DIR_INFO)/$(THISAPP)-tools2
  EXTRA_CONFIG = --prefix=/tools \
		--with-local-prefix=/tools \
		--enable-clocale=gnu \
		--enable-shared \
		--enable-threads=posix \
		--enable-__cxa_atexit \
		--enable-languages=c,c++ \
		--disable-libstdcxx-pch
  EXTRA_MAKE = 
  EXTRA_INSTALL = 
endif
endif

###############################################################################
# Top-level Rules
###############################################################################
objects = $(DL_FILE)

$(DL_FILE) = $(DL_FROM)/$(DL_FILE)

$(DL_FILE)_MD5 = 6ff1af12c53cbb3f79b27f2d6a9a3d50

install : $(TARGET)

check : $(patsubst %,$(DIR_CHK)/%,$(objects))

download :$(patsubst %,$(DIR_DL)/%,$(objects))

md5 : $(subst %,%_MD5,$(objects))

###############################################################################
# Downloading, checking, md5sum
###############################################################################

$(patsubst %,$(DIR_CHK)/%,$(objects)) :
	@$(CHECK)

$(patsubst %,$(DIR_DL)/%,$(objects)) :
	@$(LOAD)

$(subst %,%_MD5,$(objects)) :
	@$(MD5)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : $(patsubst %,$(DIR_DL)/%,$(objects))
	@$(PREBUILD)
	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build && cd $(DIR_SRC) && tar jxf $(DIR_DL)/$(DL_FILE)
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-pr28045.patch
	@mkdir $(DIR_SRC)/gcc-build
ifeq "$(ROOT)" ""
ifeq "$(INST)" "1"
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-uclibc-conf.patch
	cd $(DIR_SRC)/gcc-build && $(DIR_APP)/configure $(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && PATH=$(TARGET_PATH) make $(MAKETUNING) all-gcc
	cd $(DIR_SRC)/gcc-build && PATH=$(TARGET_PATH) make install-gcc
	cd /opt/$(MACHINE)-uClibc/bin && for i in `ls -w1 $(MACHINE)-linux-uclibc-*`; do \
		ln -svf $$i $(MACHINE)-linux-`echo $$i | cut -c 19-`; \
	done
	ln -svf $(MACHINE)-linux-uclibc /opt/$(MACHINE)-uClibc/$(MACHINE)-linux
	ln -svf gcc /opt/$(MACHINE)-uClibc/$(MACHINE)-linux-uclibc/bin/cc
else
ifeq "$(INST)" "2"
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-uclibc-conf.patch
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-uclibc-locale.patch
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-libstdc++-pic.patch
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/gcc-sdk-libstdc++-includes.patch
	ln -snf ../include /opt/$(MACHINE)-uClibc/$(MACHINE)-linux-uclibc/sys-include
	cd $(DIR_SRC)/gcc-build && $(DIR_APP)/configure $(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && PATH=$(TARGET_PATH) make $(MAKETUNING) $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && PATH=$(TARGET_PATH) make install $(EXTRA_INSTALL)
	cp -f /opt/$(MACHINE)-uClibc/lib/libgcc_s.so /lib
	cd /lib && ln -sf libgcc_s.so libgcc_s.so.1
else
	cd $(DIR_APP) && sed -i 's/install_to_$$(INSTALL_DEST) //' libiberty/Makefile.in
	cd $(DIR_APP) && sed -i 's/^XCFLAGS =$$/& -fomit-frame-pointer/' gcc/Makefile.in
	cd $(DIR_APP) && sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in
	cd $(DIR_APP) && sed -i 's/@have_mktemp_command@/yes/' gcc/gccbug.in

	cd $(DIR_SRC)/gcc-build && $(DIR_APP)/configure $(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(MAKETUNING) $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
	ln -sfv ../usr/bin/cpp /lib
	ln -sfv gcc /usr/bin/cc
endif
endif
else
ifeq "$(PASS)" "1"
	cd $(DIR_SRC)/gcc-build && $(DIR_APP)/configure $(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(MAKETUNING) $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
	ln -sfv gcc /tools/bin/cc
else
	cd $(DIR_APP) && cp -v gcc/Makefile.in{,.orig}
	cd $(DIR_APP) && sed 's@\./fixinc\.sh@-c true@' gcc/Makefile.in.orig > gcc/Makefile.in
	cd $(DIR_APP) && cp -v gcc/Makefile.in{,.tmp}
	cd $(DIR_APP) && sed 's/^XCFLAGS =$\/& -fomit-frame-pointer/' gcc/Makefile.in.tmp \
				> gcc/Makefile.in
	cd $(DIR_APP) && patch -Np1 < $(DIR_SRC)/src/patches/$(THISAPP)-specs-1.patch
	cd $(DIR_SRC)/gcc-build && $(DIR_APP)/configure $(EXTRA_CONFIG)
	cd $(DIR_SRC)/gcc-build && make $(MAKETUNING) $(EXTRA_MAKE)
	cd $(DIR_SRC)/gcc-build && make $(EXTRA_INSTALL) install
endif
endif
	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build
	@$(POSTBUILD)
